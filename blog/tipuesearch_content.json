{"pages":[{"title":"About","text":"pj3ag4 專案網誌 專案倉儲: https://github.com/mdecd2023/2a3-pj3ag4 專案網站: https://mdecd2023.github.io/2a3-pj3ag4/ 專案投影片: https://mdecd2023.github.io/2a3-pj3ag4/reveal 專案網誌: https://mdecd2023.github.io/2a3-pj3ag4/blog","tags":"misc","url":"https://mdecd2023.github.io/2a3-pj3ag4/blog/pages/about/"},{"title":"2023 協同產品設計實習","text":"2023 年 Spring 協同產品設計實習課程 pj3ag4 網誌. 主段落標題 在標題下一行輸入四個等號, 就可以作為該段文章的段落標題 也可以直接使用 html, 例如: anchor 標註, pj3ag4 網站: 2a3-pj3ag4 次段落標題 標題下一行輸入四個底線, 也可以作為該段文章的段落標題 假如要嵌入程式碼: from zmqRemoteApi_IPv6 import RemoteAPIClient import time import math import keyboard # Connect to the CoppeliaSim scene server client = RemoteAPIClient('localhost', 23000) sim = client.getObject('sim') #sim.startSimulation() # Load the Omniwheel 45deg A1 model wheel_a1_file = \"C:/CoppeliaSimEdu_4.5.1_rev4_for_cd2023/models/components/locomotion and propulsion/Omniwheel 45deg A.ttm\" wheel_a1_handle = sim.loadModel(wheel_a1_file) wheel_a1_name = \"wheelA1\" sim.setObjectAlias(wheel_a1_handle, wheel_a1_name) # Load the Omniwheel 45deg A2 model wheel_a2_file = \"C:/CoppeliaSimEdu_4.5.1_rev4_for_cd2023/models/components/locomotion and propulsion/Omniwheel 45deg A.ttm\" wheel_a2_handle = sim.loadModel(wheel_a2_file) wheel_a2_name = \"wheelA2\" sim.setObjectAlias(wheel_a2_handle, wheel_a2_name) # Load the Omniwheel 45deg B1 model wheel_b1_file = \"C:/CoppeliaSimEdu_4.5.1_rev4_for_cd2023/models/components/locomotion and propulsion/Omniwheel 45deg B.ttm\" wheel_b1_handle = sim.loadModel(wheel_b1_file) wheel_b1_name = \"wheelB1\" sim.setObjectAlias(wheel_b1_handle, wheel_b1_name) # Load the Omniwheel 45deg B2 model wheel_b2_file = \"C:/CoppeliaSimEdu_4.5.1_rev4_for_cd2023/models/components/locomotion and propulsion/Omniwheel 45deg B.ttm\" wheel_b2_handle = sim.loadModel(wheel_b2_file) wheel_b2_name = \"wheelB2\" sim.setObjectAlias(wheel_b2_handle, wheel_b2_name) # Create a chassis object # set chassis to be 10kg chassis_handle = sim.createPureShape(0, 8, [0.1, 0.2, 0.05], 10, None) sim.setObjectAlias(chassis_handle, 'chassis') #Set the local respondable mask to ffff0000 (since the wheel repondable is fff0) sim.setObjectInt32Param(chassis_handle, sim.shapeintparam_respondable_mask, 0xff0f) # Set the position and orientation of the chassis sim.setObjectPosition(chassis_handle, -1, [0, 0, 0.055]) sim.setObjectOrientation(chassis_handle, -1, [0, 0, 0]) # Set the positions of the wheels relative to the chassis wheel_a1_pos = [-0.085, 0.075, -0.005] wheel_a2_pos = [0.085, -0.075, -0.005] wheel_b1_pos = [0.085, 0.075, -0.005] wheel_b2_pos = [-0.085, -0.075, -0.005] # Set the positions of the wheels sim.setObjectPosition(wheel_a1_handle, chassis_handle, wheel_a1_pos) sim.setObjectPosition(wheel_a2_handle, chassis_handle, wheel_a2_pos) sim.setObjectPosition(wheel_b1_handle, chassis_handle, wheel_b1_pos) sim.setObjectPosition(wheel_b2_handle, chassis_handle, wheel_b2_pos) # Set the parent-child relationship between the wheels and the chassis sim.setObjectParent(wheel_a1_handle, chassis_handle, True) sim.setObjectParent(wheel_a2_handle, chassis_handle, True) sim.setObjectParent(wheel_b1_handle, chassis_handle, True) sim.setObjectParent(wheel_b2_handle, chassis_handle, True) # Set wheel velocities wheel_a1_velocity = 0 wheel_a2_velocity = 0 wheel_b1_velocity = 0 wheel_b2_velocity = 0 # Set the control loop while True: if keyboard.is_pressed('up'): wheel_a1_velocity = 10 wheel_a2_velocity = 10 wheel_b1_velocity = 10 wheel_b2_velocity = 10 elif keyboard.is_pressed('down'): wheel_a1_velocity = -10 wheel_a2_velocity = -10 wheel_b1_velocity = -10 wheel_b2_velocity = -10 elif keyboard.is_pressed('left'): wheel_a1_velocity = -10 wheel_a2_velocity = 10 wheel_b1_velocity = 10 wheel_b2_velocity = -10 elif keyboard.is_pressed('right'): wheel_a1_velocity = 10 wheel_a2_velocity = -10 wheel_b1_velocity = -10 wheel_b2_velocity = 10 else: wheel_a1_velocity = 0 wheel_a2_velocity = 0 wheel_b1_velocity = 0 wheel_b2_velocity = 0 # Set the target velocities for the wheels sim.setJointTargetVelocity(wheel_a1_handle, wheel_a1_velocity) sim.setJointTargetVelocity(wheel_a2_handle, wheel_a2_velocity) sim.setJointTargetVelocity(wheel_b1_handle, wheel_b1_velocity) sim.setJointTargetVelocity(wheel_b2_handle, wheel_b2_velocity) # Let CoppeliaSim process the wheel velocities time.sleep(0.01) if keyboard.is_pressed('q'): # Press 'q' to break the loop break # Stop the simulation # sim.stopSimulation() 用網誌紀錄每位組員的工作內容 當多人採協同模式執行專案時, 若希望利用網誌紀錄個人的工作內容, 可以在倉儲的目錄中, 建立一個 users 目錄, 然後各自從倉儲的 config 目錄中 copy 一份 pelican.leo 到 users 目錄中, 然後將此 pelican.leo 改名為 pelican_學號.leo, 接著則在可攜系統的命令列中輸入 leo 以開啟 Leo Editor, 之後再利用 Leo Editor 開啟各自位於 users 目錄中的專有 .leo 檔案後, 建立位於 markdown 目錄中的\"日期_學號.md\" 檔案, 最後再將網誌 Markdown 檔案轉為 blog 目錄中的超文件.","tags":"CD","url":"https://mdecd2023.github.io/2a3-pj3ag4/blog/2023-Spring-Project3-Football-Game.html"}]}